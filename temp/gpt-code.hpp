#include <cstdio>
#include <cstring>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <sys/_endian.h>
#include <thread>
#include <unistd.h>

typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef size_t usize;

usize min(usize a, usize b) { return a < b ? a : b; }
void delay(u32 milliseconds) {
  std::this_thread::sleep_for(std::chrono::milliseconds(milliseconds));
}

void *mempcpy(void *dst, const void *src, size_t n) {
  return (char *)memcpy(dst, src, n) + n;
}

class SerialClass {
public:
  void begin(long baud) { printf("[DEBUG] Serial.begin(%lu)", baud); }
  usize write(const u8 *bytes, usize length) {
    return SerialClass::write((const char *)bytes, length);
  }
  usize write(const char *bytes, usize length) {
    for (usize i = 0; i < length; ++i) {
      u8 byte = bytes[i];
      if (byte == '\n')
        printf("\\n");
      else if (byte == '\r')
        printf("\\r");
      else if (byte == '\t')
        printf("\\t");
      if (byte == '\\')
        printf("\\\\");
      else if (byte >= ' ' && byte <= '~')
        printf("%c", byte);
      else
        printf("\\x%02x", byte);
    }
    printf("\n");

    return length;
  }
  // TODO: have these read methods read from a file
  u8 readBytes(u8 *buffer, usize length) { return 1; }
  u8 readBytes(char *buffer, usize length) {
    return readBytes((char *)buffer, length);
  }
  u8 readBytesUntil(char terminator, u8 *buffer, usize length) { return 1; }
  u8 readBytesUntil(char terminator, char *buffer, usize length) {
    return readBytesUntil(terminator, (char *)buffer, length);
  }
  int read() { return 1; }
  int available() { return 1; }
  void setTimeout(long milliseconds) {
    printf("[DEBUG] Serial.setTimeout(%lu)", milliseconds);
  }
} Serial;

void setup();
void loop();

int main() {
  setup();
  // while (true)
  //   loop();
  return 0;
}

#define FAKE_IMAGE                                                             \
  255, 216, 255, 224, 0, 16, 74, 70, 73, 70, 0, 1, 1, 1, 0, 96, 0, 96, 0, 0,   \
      255, 225, 0, 34, 69, 120, 105, 102, 0, 0, 77, 77, 0, 42, 0, 0, 0, 8, 0,  \
      1, 1, 18, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 255, 219, 0, 67, 0,  \
      2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 5, 3, 3, 3, 3, 3, 6, 4, 4,  \
      3, 5, 7, 6, 7, 7, 7, 6, 7, 7, 8, 9, 11, 9, 8, 8, 10, 8, 7, 7, 10, 13,    \
      10, 10, 11, 12, 12, 12, 12, 7, 9, 14, 15, 13, 12, 14, 11, 12, 12, 12,    \
      255, 219, 0, 67, 1, 2, 2, 2, 3, 3, 3, 6, 3, 3, 6, 12, 8, 7, 8, 12, 12,   \
      12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  \
      12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  \
      12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 255, 192, 0, 17, 8, 0,   \
      7, 0, 10, 3, 1, 34, 0, 2, 17, 1, 3, 17, 1, 255, 196, 0, 31, 0, 0, 1, 5,  \
      1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \
      11, 255, 196, 0, 181, 16, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1,   \
      125, 1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113,    \
      20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51,    \
      98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, \
      54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87,  \
      88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118,   \
      119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147,    \
      148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168,    \
      169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196,    \
      197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217,    \
      218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243,    \
      244, 245, 246, 247, 248, 249, 250, 255, 196, 0, 31, 1, 0, 3, 1, 1, 1, 1, \
      1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 255, \
      196, 0, 181, 17, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119, 0, 1, \
      2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8,   \
      20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10,    \
      22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54,    \
      55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88,  \
      89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119,  \
      120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147,    \
      148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168,    \
      169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196,    \
      197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217,    \
      218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245,    \
      246, 247, 248, 249, 250, 255, 218, 0, 12, 3, 1, 0, 2, 17, 3, 17, 0, 63,  \
      0, 239, 166, 241, 43, 120, 134, 255, 0, 198, 38, 199, 101, 164, 45, 52,  \
      54, 186, 101, 171, 2, 145, 92, 204, 246, 237, 36, 119, 18, 20, 249, 176, \
      93, 254, 101, 108, 28, 32, 228, 215, 59, 160, 248, 238, 198, 219, 66,    \
      178, 143, 80, 186, 248, 89, 113, 168, 71, 2, 45, 204, 167, 66, 191, 143, \
      204, 148, 40, 14, 219, 86, 50, 23, 45, 147, 128, 72, 30, 167, 173, 20,   \
      87, 243, 254, 91, 70, 53, 165, 37, 62, 215, 233, 250, 220, 254, 138,     \
      205, 43, 202, 132, 98, 227, 223, 207, 244, 104, 255, 217
